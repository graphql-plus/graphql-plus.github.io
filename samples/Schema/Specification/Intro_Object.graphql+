output _TypeObject<$kind:_TypeKind $parent $typeParam $field:_Field $alternate:_Alternate> {
    : _ChildType<$kind $parent>
        typeParams: $typeParam[]
        fields: $field[]
        alternates: $alternate[]
        allFields: _ObjectFor<$field>[]
        allAlternates: _ObjectFor<$alternate>[]
    }

dual _ObjDocumented<$base:_ObjBase> {
        base: $base
        documentation: String[]
    | $base
    }

output _ObjConstraint<$base:_ObjBase> {
    | _TypeSimple
    | $base
}
output _ObjType<$base:_ObjBase> {
    | _BaseType<_TypeKind.Internal>
    | _ObjConstraint<$base>
    }

output _ObjBase {
        typeArgs: _ObjDocumented<_ObjArg>[]
    | _TypeParam
    }

output _ObjArg {
    : _TypeRef<_TypeKind>
    | _TypeParam
}

domain _TypeParam { :_Identifier String }

output _ObjParam<$base:_ObjBase> {
    typeParam: _TypeParam
    documentation: String[]
    constraint: _ObjConstraint<$base>
}

output _Alternate<$base:_ObjBase> {
      type: _ObjDocumented<$base>
      collections: _Collections[]
    }

output _ObjectFor<$for:_ForParam> {
    : $for
        object: _Identifier
    }

output _Field<$base:_ObjBase> {
    : _Aliased
      type: _ObjDocumented<$base>
      modifiers: _Modifiers[]
    }

output _ForParam<$base:_ObjBase> {
    | _Alternate<$base>
    | _Field<$base>
    }
